/////////////////////////////////////////
//version origin

import 'package:flutter/material.dart';

class RowQCM extends StatefulWidget {
  const RowQCM({
    Key? key,
    required this.prop,
  }) : super(key: key);

  final String prop;

  @override
  State<RowQCM> createState() => _RowQCMState();
}

class _RowQCMState extends State<RowQCM> {
  bool isSelected = false;
  // Variable pour stocker la proposition sélectionnée
  String? selectedProposition;

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
      child: InkWell(
        onTap: () {
          setState(() {
            isSelected = !isSelected; // inverser l'état de sélection
          });
          // Appeler le rappel sur la ligne pour notifier la sélection de la ligne
          // widget.onRowSelected?.call(isSelected);
        },
        child: Container(
          decoration: BoxDecoration(
            color: isSelected ? Colors.blue : Colors.black.withOpacity(0.3),
            borderRadius: BorderRadius.circular(10),
          ),
          padding: const EdgeInsets.symmetric(
            horizontal: 16,
            vertical: 12,
          ),
          child: Row(
            children: [
              Expanded(
                child: Text(widget.prop),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

///////////////////////////////////////
//version modif


import 'package:flutter/material.dart';

class RowQCM extends StatefulWidget {
  const RowQCM({
    Key? key,
    required this.prop,
    required this.onSelected,
    required this.isSelected,
  }) : super(key: key);

  final String prop;
  final VoidCallback onSelected;
  final bool isSelected;

  @override
  State<RowQCM> createState() => _RowQCMState();
}

class _RowQCMState extends State<RowQCM> {
  // Variable pour stocker la proposition sélectionnée
  String? selectedProposition;
  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
      child: InkWell(
        onTap: () {
          widget
              .onSelected(); // Appeler la fonction onSelected du widget parent
          setState(() {
            selectedProposition =
                widget.prop; // Mettre à jour la proposition sélectionnée
          });
        },
        child: Container(
          decoration: BoxDecoration(
            color:
                widget.isSelected ? Colors.blue : Colors.black.withOpacity(0.3),
            borderRadius: BorderRadius.circular(10),
          ),
          padding: const EdgeInsets.symmetric(
            horizontal: 16,
            vertical: 12,
          ),
          child: Row(
            children: [
              Expanded(
                child: Text(widget.prop),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


//////////////////////////////////////////////////////////////
// version modifié


import 'package:flutter/material.dart';
import 'package:quizzflutter/entities/Question.dart';
import 'package:quizzflutter/entities/Quiz.dart';
import 'package:quizzflutter/pages/quiz/widgets/row_question.dart';
import 'package:quizzflutter/pages/quiz/widgets/row_qcm.dart';
import 'package:quizzflutter/routes/pages.dart';

class PageQuiz extends StatefulWidget {
  const PageQuiz({Key? key}) : super(key: key);

  @override
  State<PageQuiz> createState() => _PageQuizState();
}

class _PageQuizState extends State<PageQuiz> {
  late final TextEditingController controller;
  bool coloring = false;
  String selectedProposition = "";
  bool finQuiz = false;
  late Question? questionActuelle;

  @override
  void initState() {
    controller = TextEditingController();
    super.initState();
  }

  @override
  void dispose() {
    controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final quiz = ModalRoute.of(context)!.settings.arguments as Quiz;
    if (finQuiz) {
      Navigator.pushNamed(context, Pages.score, arguments: quiz);
      questionActuelle = null;
    } else {
      questionActuelle = quiz.getQuestions()[quiz.numQuestion];
    }

    return Scaffold(
      appBar: AppBar(
        title: Text(quiz.getTitre()),
      ),
      body: SingleChildScrollView(
        child: Center(child: () {
          if (finQuiz) {
            return Column(
              children: [
                Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Expanded(
                      child: Text(
                          "${quiz.score.toString()} / ${quiz.getQuestions().length}"),
                    ),
                  ],
                ),
                Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    ElevatedButton(
                      onPressed: () {
                        quiz.remiseZero();
                        Navigator.pop(context);
                      },
                      child: const Text("Retour Home"),
                    ),
                  ],
                )
              ],
            );
          } else {
            Column(
              children: [
                if (/*quiz.numQuestion < quiz.getSizeQuestions() && */ !finQuiz)
                  RowQuestion(question: questionActuelle!),
                if (questionActuelle != null &&
                    questionActuelle!.getSizeProposition() == 0)
                  Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Flexible(
                        child: TextField(
                          controller: controller,
                          decoration: const InputDecoration(
                              labelText: 'Ecrire la réponse ici'),
                        ),
                      ),
                      Flexible(
                        child: IconButton(
                          icon: const Icon(Icons.arrow_forward_ios),
                          onPressed: () {
                            final usersAnswer =
                                controller.text.toUpperCase().trim();

                            if (usersAnswer !=
                                    quiz
                                        .getQuestions()[quiz.numQuestion]
                                        .getReponse() &&
                                quiz.essai < 2) {
                              quiz.essai += 1;
                              ScaffoldMessenger.of(context).showSnackBar(
                                SnackBar(
                                  content: Text(
                                      "La réponse est ${quiz.getQuestions()[quiz.numQuestion].getReponse()}"),
                                ),
                              );
                            } else {
                              if (quiz.essai == 0) {
                                quiz.score += 1;
                              }
                              if (quiz.numQuestion < quiz.getSizeQuestions()) {
                                quiz.numQuestion += 1;
                              } else {
                                finQuiz = true;
                              }
                              if (finQuiz) {
                                Navigator.popAndPushNamed(context, Pages.score,
                                    arguments: quiz);
                              }
                              controller.clear();
                              quiz.essai = 0;
                              setState(() {});
                            }
                          },
                        ),
                      ),
                    ],
                  ),
                if (quiz.getQuestions()[quiz.numQuestion].getSizeProposition() >
                    0)
                  Column(
                    children: [
                      for (final String item
                          in quiz.getQuestions()[quiz.numQuestion].proposition)
                        Padding(
                          padding: const EdgeInsets.symmetric(
                              horizontal: 20, vertical: 10),
                          child: InkWell(
                            onTap: () {
                              selectedProposition = item;
                            },
                            child: Container(
                              decoration: BoxDecoration(
                                color: coloring
                                    ? Colors.blue
                                    : Colors.black.withOpacity(0.3),
                                borderRadius: BorderRadius.circular(10),
                              ),
                              padding: const EdgeInsets.symmetric(
                                horizontal: 16,
                                vertical: 12,
                              ),
                              child: Row(
                                children: [
                                  Expanded(
                                    child: Text(item),
                                  ),
                                ],
                              ),
                            ),
                          ),
                        ),
                      Row(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          ElevatedButton(
                            onPressed: () {
                              if (selectedProposition !=
                                      quiz
                                          .getQuestions()[quiz.numQuestion]
                                          .getReponse() &&
                                  quiz.essai < 2) {
                                // La réponse est incorrecte
                                quiz.essai += 1;
                                ScaffoldMessenger.of(context).showSnackBar(
                                  SnackBar(
                                    content: Text(
                                        "La réponse est ${quiz.getQuestions()[quiz.numQuestion].getReponse()}"),
                                  ),
                                );
                              } else {
                                // La réponse est incorrecte
                                if (quiz.essai == 0) {
                                  quiz.score += 1;
                                }
                                if (quiz.numQuestion <
                                    quiz.getSizeQuestions()) {
                                  quiz.numQuestion += 1;
                                } else {
                                  finQuiz = true;
                                }
                                if (finQuiz) {
                                  Navigator.popAndPushNamed(
                                      context, Pages.score,
                                      arguments: quiz);
                                }
                                quiz.essai = 0;
                                setState(() {});
                              }
                            },
                            child: const Text("VALIDER"),
                          )
                        ],
                      ),
                    ],
                  )
              ],
            );
          }
        }()),
      ),
    );
  }
}



//////////////////////////////////////////////////////////////////////////////////////////
// VERSION INITIALE


import 'package:flutter/material.dart';
import 'package:quizzflutter/entities/Question.dart';
import 'package:quizzflutter/entities/Quiz.dart';
import 'package:quizzflutter/pages/quiz/widgets/row_question.dart';
import 'package:quizzflutter/pages/quiz/widgets/row_qcm.dart';
import 'package:quizzflutter/routes/pages.dart';

class PageQuiz extends StatefulWidget {
  const PageQuiz({Key? key}) : super(key: key);

  @override
  State<PageQuiz> createState() => _PageQuizState();
}

class _PageQuizState extends State<PageQuiz> {
  late final TextEditingController controller;
  bool coloring = false;
  String selectedProposition = "";
  bool finQuiz = false;
  late Question? questionActuelle;

  @override
  void initState() {
    controller = TextEditingController();
    super.initState();
  }

  @override
  void dispose() {
    controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final quiz = ModalRoute.of(context)!.settings.arguments as Quiz;
    if (finQuiz) {
      Navigator.pushNamed(context, Pages.score, arguments: quiz);
      questionActuelle = null;
    } else {
      questionActuelle = quiz.getQuestions()[quiz.numQuestion];
    }

    return Scaffold(
      appBar: AppBar(
        title: Text(quiz.getTitre()),
      ),
      body: SingleChildScrollView(
        child: Center(
          child:
              // fonction anonyme return column question ou column score

              Column(
            children: [
              if (/*quiz.numQuestion < quiz.getSizeQuestions() && */ !finQuiz)
                RowQuestion(question: questionActuelle!),
              if (questionActuelle != null &&
                  questionActuelle!.getSizeProposition() == 0)
                Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Flexible(
                      child: TextField(
                        controller: controller,
                        decoration: const InputDecoration(
                            labelText: 'Ecrire la réponse ici'),
                      ),
                    ),
                    Flexible(
                      child: IconButton(
                        icon: const Icon(Icons.arrow_forward_ios),
                        onPressed: () {
                          final usersAnswer =
                              controller.text.toUpperCase().trim();

                          if (usersAnswer !=
                                  quiz
                                      .getQuestions()[quiz.numQuestion]
                                      .getReponse() &&
                              quiz.essai < 2) {
                            quiz.essai += 1;
                            ScaffoldMessenger.of(context).showSnackBar(
                              SnackBar(
                                content: Text(
                                    "La réponse est ${quiz.getQuestions()[quiz.numQuestion].getReponse()}"),
                              ),
                            );
                          } else {
                            if (quiz.essai == 0) {
                              quiz.score += 1;
                            }
                            if (quiz.numQuestion < quiz.getSizeQuestions()) {
                              quiz.numQuestion += 1;
                            } else {
                              finQuiz = true;
                            }
                            if (finQuiz) {
                              Navigator.popAndPushNamed(context, Pages.score,
                                  arguments: quiz);
                            }
                            controller.clear();
                            quiz.essai = 0;
                            setState(() {});
                          }
                        },
                      ),
                    ),
                  ],
                ),
              if (quiz.getQuestions()[quiz.numQuestion].getSizeProposition() >
                  0)
                Column(
                  children: [
                    for (final String item
                        in quiz.getQuestions()[quiz.numQuestion].proposition)
                      Padding(
                        padding: const EdgeInsets.symmetric(
                            horizontal: 20, vertical: 10),
                        child: InkWell(
                          onTap: () {
                            selectedProposition = item;
                          },
                          child: Container(
                            decoration: BoxDecoration(
                              color: coloring
                                  ? Colors.blue
                                  : Colors.black.withOpacity(0.3),
                              borderRadius: BorderRadius.circular(10),
                            ),
                            padding: const EdgeInsets.symmetric(
                              horizontal: 16,
                              vertical: 12,
                            ),
                            child: Row(
                              children: [
                                Expanded(
                                  child: Text(item),
                                ),
                              ],
                            ),
                          ),
                        ),
                      ),
                    Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        ElevatedButton(
                          onPressed: () {
                            if (selectedProposition !=
                                    quiz
                                        .getQuestions()[quiz.numQuestion]
                                        .getReponse() &&
                                quiz.essai < 2) {
                              // La réponse est incorrecte
                              quiz.essai += 1;
                              ScaffoldMessenger.of(context).showSnackBar(
                                SnackBar(
                                  content: Text(
                                      "La réponse est ${quiz.getQuestions()[quiz.numQuestion].getReponse()}"),
                                ),
                              );
                            } else {
                              // La réponse est incorrecte
                              if (quiz.essai == 0) {
                                quiz.score += 1;
                              }
                              if (quiz.numQuestion < quiz.getSizeQuestions()) {
                                quiz.numQuestion += 1;
                              } else {
                                finQuiz = true;
                              }
                              if (finQuiz) {
                                Navigator.popAndPushNamed(context, Pages.score,
                                    arguments: quiz);
                              }
                              quiz.essai = 0;
                              setState(() {});
                            }
                          },
                          child: const Text("VALIDER"),
                        )
                      ],
                    ),
                  ],
                )
            ],
          ),
        ),
      ),
    );
  }
}




    // final Question questionActuelle = quiz.getQuestions()[quiz.numQuestion];
